plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge{
        platformPackage = "neoforge"
    }
}


loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    mods {
        forge {
            sourceSet project(":neoforge").sourceSets.main
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

processResources {
    inputs.property "version", "${mod_version}"
    inputs.property "mod_id", "${mod_id}"
    inputs.property "mod_name", "${mod_name}"
    inputs.property "mod_license", "${mod_license}"
    inputs.property "mod_description", "${mod_description}"
    inputs.property "mod_authors", "${mod_authors}"
    inputs.property "mod_credits", "${mod_credits}"
    inputs.property "mod_group", project.group
    inputs.property "mod_source", "${mod_source}"
    inputs.property "mc_version", "${minecraft_version}"
    inputs.property "architectury_version", "${architectury_version}"
    inputs.property "jei_version", "${jei_version}"

    filesMatching("META-INF/mods.toml") {
        expand (
                "version" : "${mod_version}",
                "mod_id" : "${mod_id}",
                "mod_name" : "${mod_name}",
                "mod_license" : "${mod_license}",
                "mod_description" : "${mod_description}",
                "mod_authors" : "${mod_authors}",
                "mod_credits" : "${mod_credits}",
                "mod_group" : project.group,
                "mod_source" : "${mod_source}",
                "mc_version" : "${minecraft_version}",
                "architectury_version" : "${architectury_version}",
                "jei_version" : "${jei_version}"
        )
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "legacy.common.json"
    exclude "legacy.accessWidener"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}


remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    atAccessWideners.add "legacy.accesswidener"
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    afterEvaluate {
        [":common"].forEach {
            def depSources = project(it).sourcesJar
            dependsOn depSources
            from(depSources.archiveFile.map { zipTree(it) }) {
                exclude "legacy.accesswidener"
            }
        }
    }
}


components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenNeoForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
